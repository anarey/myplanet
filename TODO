Proyecto planet-django

- Configuramos maquinas virtuales a través de Vagrant y chef para trabajar.
- Crear repositorio. https://github.com/anarey/myplanet
- Creo el repositorio de trabajo en github
- Creo el proyecto: django-admin.py startproject myplanet
- Creo la aplicación: python manage.py startapp planet
- Termino de configurar el espacio de trabajo.
$ git init
$ git remote add origin git@github.com:anarey/myplanet.git
$ git pull git@github.com:anarey/myplanet.git
$ git push -u origin master

---
Comando para arrancar el proyecto. 
$ python manage.py runserver [::]:8000

----
Tareas:
ok a ### La idea es hacer un planet muy básico y sencillo en Django. Espero que
como mínimo te sirva para aprender un poco este framework que me has
contado que te interesaba.

ok b ## La idea es hacer un proyecto con una sola aplicación denominada
planet.  

ok c ## Esta aplicación tendrá un modelo denominado Blog con cuatro
campos: 
autor, 
nombre (del blog), 
feed que será una URL que apunte al feed RSS con el contenido del blog 
campo booleano que indique si este blog está activo o no.

ok ## d Una vez tengas el modelo deberás registrarlo en la aplicación 'admin'
de Django para que se puedan crear, editar y modificar objetos del
modelo Blog anteriormente descrito.

ok ## e La aplicación tendrá una sola vista pública en la url /planet que hará
lo siguiente:

ok ## f 1. Recorrer todos los objetos del modelo Blog que estén activos.
ok ## 2. Para cada blog se debe descargar el feed de posts. 
Dejo a tu elección la libreria a utilizar para esto (las hay dentro de la
librería estándar y también hay otras más específicas y/o fáciles de
utilizar fuera de la librería estándar)

ok ## 3. Una vez que se descargue el feed debe parsear el XML y quedarse
con el título del post, el enlace, la fecha de publicación y el cuerpo
del contenido. Esto debe almacenarlo en una estructura de datos. Ver
punto 4. Al igual que con el paso 2, puedes usar la librería de XML
que quieras.

ok ## Sacar de forma automática los datos. (La he liado inicialmente para recorrer los datos. Error, estaba intentando acceder a través del bucle a d['entries'][i] en vez de d['entries'])
- Estudiar como ponerlo bonito.

 4. Una vez almacenados todos los posts de todos los blogs en tu
estructura de datos, debe ordenarlos por fecha de publicación.
 - OK - Obtener la fecha en timestamp
 - OK - Ordenar por fecha

OK - 5. Esa información debe pasarsela a una plantilla en donde se
mostrarán todos estos posts con enlaces a su blog original.

ok Si te da tiempo y de forma opcional, puedes implementar paginación. En
Django hay una utilidad específica que te ayudará.
[TODO] Poner un poco más bonita. ¿con numeración? Si me da tiempo.

[TODO] Puedes restringirlo solo a un cierto tipo de feed RSS, Atom, etc.. y version.

[ok] En cuanto tengas el repositorio creado en Github pásanos la URL, please.

---------------
## Control de horas
Lunes:
1 hora: git, vagrant y montaje de todo.
2 horas: a-f
Martes:
12:00 - 14:30 // Investigar parseo de feed. Modulo feddparser
00:00 - 2:00 // Estructuras de datos, gestión de un post

Miercoles:
11:00 - 14:30  // Proceso de los post y ordenación
15:45 - 18:30 // mostrado del contenido de los post y los campos necesarios. Paginación básica.

Jueves:
12:00 - 14:30 // Herencia de template y estudio del uso de css
16:30 - 20:00 // "
22:00 -       // Revivar y corregir errores.

http://packages.python.org/feedparser/microformats.html#advanced-microformats
